Craftable Turret

The craftable turret will be a new item that can be crafted using a sniper rifle. It will have the ability to be set-up at a location and then every turn it will automatically shoot the nearest zombie. It will also be able to be packed down and moved somewhere else.

To implement this, we will create a new class called Turret, which will extend Item. We chose not to make it extend WeaponItem as we didn't want actors without the ability to packup the turret to be able to pick it up (all WeaponItems are portable) and we also didn't want to be able to use the Turret as a mêlée weapon.

The turret will add to its allowable actions an instance of a new class called SetUpTurretAction, which upon execution will allow the player to set up the turret where they are standing and tell the turret to start shooting. The SetUpTurretAction will extend DropItemAction, and in adition to dropping the turret, it will call the turret's setUp method to tell it to activate. The setUp method will tell the turret to turn on and will pass a GameMap to the turret from SetUpTurretAction's execute method so that the turret can remove any actors it kills from the game using GameMap's removeActor().

We considered making the turret an Actor instead of an Item, and just removing its ability to move around. This would have allowed us to hurt and kill other actors without any modifications to the existing attack system and removed the need to pass the turret its current map on set up, as actions could be used. But we decided this would be an improper abstraction and hence bad design, as the turret is not a character.

Due to this decision, the turret (as it is an item) could not use the existing AttackAction for hurting its targets as AttackAction's execute requires an attacking actor and a weapon. To solve this problem, we will add a new public method to AttackAction called executeAsItem, specifically for items that can attack. This new method will take as parameters the GameMap the target is on and an integer for the amount of damage to do (as no weapon is used). By creating this method in AttackAction instead of making the turret do all the hurting logic we will be able to reuse code in the AttackAction that is still relevant (such as the part that handles an actor dying and dropping everything) and it also allows future addition of items that can hurt actors, making our design more extensible.

However there is still the issue of making this AttackAction execute, as the world class will not see it. The world class does, however, tick an item every turn so we will use this to make the turret execute its AttackAction every turn, if it is turned on. The turret will find its nearest target by scanning its location's exits for actors, and then scanning those exits for actors if none are found the first time around. This will continue until a valid target is found or it runs out of locations on the current map. Once a target is found it will be used to create a new AttackAction which will then be executed using the executeAsItem method.

This presents one more problem: the tick method does not have a display parameter so there needs to be a way for the turret to print messages about who it shot each turn. There is currently no way for an Item to get the display in the existing system, as they are not expected to be printing things.

One way to fix this problem would be to modify the world class (by extending it) to pass a display parameter into the tick method. However this would be a very large change as world calls tick on the gamemap, which calls tick on all its locations, which only then calls tick on its items. So the gamemap, location and item classes would then also need to be extended to make their tick methods accept this new display parameter. This would be a very large change and require rewriting large parts of the engine code, so we will not do it this way.

Instead, we will make the turret class's constructor take a display on creation, which will be used by the turret for printing messages about who it shot. Although this method means the turret has to contain a display object (increasing dependencies), it is a much more simple solution and is the better of the 2 options.

To make the turret craftable, SniperRifle will be modified to implement CraftableItem, and a craft action will be added to its allowable actions to allow crafting the SniperRifle into a turret. The sniper rifle will hold an instance of the turret it can be crafted into, for returning when it is crafted using its CraftAction.