Going to Town:

Going to town involves moving the player to a new map and ensuring time doesn't freeze on the old map.
The world class in the engine already supports multiple map functionality, which allows the game to have multiple maps and ensures time doesn't freeze on any map the player is not in. 
We have chosen to implement the second map using this functionality, as it already exists (which allows us to create a new map without creating any new dependencies), and if we were to implement it by just replacing the main map with the town map when the player moves to the town, time would freeze in the main map as it wouldn't be processed by the world class on each turn the player is in the town.

So, in order to create a town map, the application class will be modified to create a second map while the game is being initialised. The second map will be created using the same technique as the first one. This means using the same fancy ground factory instance created for the main map. 
The new map will be created using the fancy ground factory and a string representation of the map, same as is done with the main map (again, reducing dependencies). This way is much simpler than creating a blank map and manually adding all the locations and ground types, and it allows us to see the map visually in the code, making modifications to the map easy.
The new map will then be added to the same world instance using world's addGameMap method. The world instance then handles everything else, like ticking and actor turns on both maps.

To move between the two maps, a vehicle will be needed. To implement this, a new class called Vehicle (which extends Item) will be created and a unique instance of this will be placed on both maps. We chose to make it extend Item so that we could give it actions that would allow the player to interact with it. The reason we will make a vehicle class instead of a 'car' class or 'train' class is to allow the design to be more extensible, meaning more vehicle types could be added in the future.
The vehicle class's constructor will take the vehicle name (such as 'train'), display character, the vehicle's destination (as an instance of Location) and the friendly name of the destination (such as 'town', for showing on the player's menu). It will also add a moveActorAction to its allowableActions list (inherited from item), which allows the player to interact with the vehicle and be transported somewhere when standing on it. 
This moveActorAction, when executed, will move the actor to the destination specified in the vehicle's constructor, and will take the friendly name of the destination as its direction (for showing on the menu).

In this implementation, the vehicle doesn't actually move, it just moves the player to the destination. However, by placing a vehicle on each map and moving the player between them, it looks to the player like the vehicle has moved. This choice was made to remove the need to move the vehicle and change its destination location depending on its starting location. This removes the need for the vehicle to know where it currently is, and thus reduces dependencies (such as a denpendency on the world class or GameMap class, which would allow it to know what map it is on).

The vehicle instances will be added to their respective maps in the application class and will have the name "Train", so that to the player, it looks like they are catching a train from the compound to the town, or visa versa.

To make the town interesting, and more of a challenge to collect the guns that will be there, the town will be overrun by zombies. However, as zombies can pick up weapons, we don't want the zombies taking the guns before the player goes there.
To fix this problem, the weapons need to be placed somewhere the zombies can't get to but the player can.

For this reason the guns will be placed in a fenced off area with a door, and the zombies will not have the ability to open the door. 

A new 'Door' class will be created, which will extend Ground. It will extend ground instead of Item because it needs to be able to block actors from standing on it. This requirement could have been added to an Item version of Door but it would have resulted in a new dependency on Door in the moveActorAction class, which would have to specifically check if the location contains a door. 
This Door class will override Ground's canActorEnter and allowableActions methods. canActorEnter will be made to return true only when the door is in an open state, hence only letting actors through when the door is open. 

To allow the player to change the state of the door (open or close it), the allowableActions method will return an instance of a new class called 'ToggleAction', which will extend Action. By making allowableActions return this action, the engine will automatically present this option in the player's menu when then are adjacent to the door.

The action's constructor will take an instance of a new interface called Toggleable, and a boolean representing the togglable object's current state. 

The new interface will have the public method toggle(), which tells the togglable object to change state. It will also have switchToStateDescription(boolean stateToSwitchTo) which will return a string representing the a description of changing the object to the state "stateToSwitchTo".
Door will implement this new interface.

We chose to create a ToggleAction and Toggleable interface instead of just creating a DoorAction (which would take a Door in its constructor instead of a Toggleable object) as it is more extensible and would make implementing possible future toggleable objects (such as levers and lights) easier, as they would just have to implement the Toggleable interface and then ToggleAction could be used without modifications. Without all this, a future lever or light would need their own LeverAction or LightAction respectively.

When executed, the ToggleAction will call the method on the Toggleable instance called toggle(), which, in this case, will tell the door change to the opposite state. We could have decided to make the action make the change to the state of the door, since it already knows the door's state for creating the action menu description, but that would have required making the door's state a public attribute or adding unessessary methods to the door class for setting its state. We didn't do this because it is better design practice to tell the door to change its state than to do it for it.

When the player is next to a door, they will be presented with the option to open the door, allowing actors to walk through it, or close it, preventing actors from walking through it. This stops the zombies from stealing the new gun weapons, unless the player opens the door to the guns then leaves without taking them.